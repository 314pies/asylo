//
// Copyright 2018 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo.sgx;

import "asylo/crypto/algorithms.proto";
import "asylo/crypto/certificate.proto";
import "asylo/identity/sgx/code_identity.proto";

// A payload that is serialized and signed to produce an SGX remote assertion.
message RemoteAssertionPayload {
  // Indicates the version of the assertion format.
  optional string version = 1;

  // Indicates the signature scheme used to sign this payload.
  optional SignatureScheme signature_scheme = 2;

  // The asserted SGX code identity.
  optional CodeIdentity identity = 3;

  // Additional binding data associated with the assertion.
  optional bytes user_data = 4;
}

// Defines an SGX remote assertion; a cryptographically-verifiable statement of
// SGX code identity that can be verified by a remote verifier.
message RemoteAssertion {
  // A serialized RemoteAssertionPayload, which contains a code identity as well
  // as any additional binding data associated with an assertion of that
  // identity.
  //
  // The RemoteAssertionPayload is provided in its serialized form so that the
  // verifier knows exactly which bytes were signed. Since protobuf
  // serialization is not required to be deterministic, a single protobuf might
  // in principle have multiple serializations. In order to avoid ambiguity
  // about what message was signed, the exact bytes must be provided explicitly.
  optional bytes payload = 1;

  // The signature scheme used to produce |signature|.
  optional SignatureScheme signature_scheme = 2;

  // A signature over |payload|.
  optional bytes signature = 3;

  // One or more certificate chains that can be used to verify the authenticity
  // of |signature|.
  repeated CertificateChain certificate_chains = 4;
}
