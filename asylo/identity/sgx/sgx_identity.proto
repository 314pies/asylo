//
// Copyright 2019 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package asylo;

import "asylo/identity/sgx/code_identity.proto";
import "asylo/identity/sgx/platform_provisioning.proto";

// Security-relevant machine configuration properties.
message SgxMachineConfiguration {
  optional sgx.CpuSvn cpu_svn = 1;
  optional sgx.SgxType sgx_type = 2;
}

// Specification of which fields from SgxMachineConfiguration to match.
message SgxMachineConfigurationMatchSpec {
  // Flag indicating whether to perform a match on |cpu_svn|.
  optional bool is_cpu_svn_match_required = 1;

  // Flag indicating whether to perform a match on |sgx_type|.
  optional bool is_sgx_type_match_required = 2;
}

// A high-level representation of the identity of an SGX enclave, which includes
// the properties of its code identity (sgx.CodeIdentity) and the security-
// relevant properties of its execution environment (SgxMachineConfiguration).
message SgxIdentity {
  optional sgx.CodeIdentity code_identity = 1;
  optional SgxMachineConfiguration machine_configuration = 2;
}

// Specification of which fields from SgxIdentity to match.
message SgxIdentityMatchSpec {
  optional sgx.CodeIdentityMatchSpec code_identity_match_spec = 1;
  optional SgxMachineConfigurationMatchSpec machine_configuration_match_spec =
      2;
}

// A verifier's expectation on an SgxIdentity.
message SgxIdentityExpectation {
  // Reference identity matched against the target identity per `match_spec`.
  optional SgxIdentity reference_identity = 1;

  // Specification of which fields from enclave identity to match.
  optional SgxIdentityMatchSpec match_spec = 2;
}
