# Google's Modifications to Intel's SGX Data Center Attestation Primitives

## Top-level files added
  * Added `BUILD` file for Bazel support

## Modifications to v1.0.1

### Pending PRs
* [PR#22](https://github.com/intel/SGXDataCenterAttestationPrimitives/pull/22)
    - `QuoteGeneration/common/inc/internal/elfheader/elf_common.h`
      + Added missing include for `<stdint.h>`
    - `QuoteGeneration/common/inc/internal/elfheader/elfstructs.h`
      + Added missing include for `<stdint.h>`
--
diff -Nur -x '*.png' -x '*.gif' -x .gitignore QuoteGeneration/common/inc/internal/elfheader/elf_common.h QuoteGeneration/common/inc/internal/elfheader/elf_common.h
--- QuoteGeneration/common/inc/internal/elfheader/elf_common.h
+++ QuoteGeneration/common/inc/internal/elfheader/elf_common.h
@@ -30,6 +30,8 @@
 #ifndef _SYS_ELF_COMMON_H_
 #define	_SYS_ELF_COMMON_H_ 1
 
+#include <stdint.h>
+
 typedef uint32_t u_int32_t;
 typedef uint32_t Elf_Symndx;
 
diff -Nur -x '*.png' -x '*.gif' -x .gitignore QuoteGeneration/common/inc/internal/elfheader/elfstructs.h QuoteGeneration/common/inc/internal/elfheader/elfstructs.h
--- QuoteGeneration/common/inc/internal/elfheader/elfstructs.h
+++ QuoteGeneration/common/inc/internal/elfheader/elfstructs.h
@@ -26,6 +26,8 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <stdint.h>
+
 typedef uint8_t		Elf_Byte;
 
 typedef uint32_t	Elf32_Addr;	/* Unsigned program address */
diff -Nur -x '*.png' -x '*.gif' -x .gitignore QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_ecdsa_quote.h QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_ecdsa_quote.h
--- QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_ecdsa_quote.h
+++ QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_ecdsa_quote.h
@@ -40,6 +40,7 @@
 #define _SGX_QL_ECDSA_QUOTE_H_
 
 #include "sgx_ql_quote.h"
+#include "user_types.h"
 
 /**
     Class definition of the reference ECDSA-P256 quoting code which implements the quoting interface, IQuote.
diff -Nur -x '*.png' -x '*.gif' -x .gitignore QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_quote.h QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_quote.h
--- QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_quote.h
+++ QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_quote.h
@@ -38,6 +38,8 @@
 /* User defined types */
 #ifndef _SGX_QL_QUOTE_H_
 #define _SGX_QL_QUOTE_H_
+
+#include <stddef.h>
 #include "sgx_ql_lib_common.h"
 #include "sgx_quote.h"
 #include "sgx_quote_3.h"
Binary files QuoteVerification/Src/AttestationApp/sampleData/quote.dat and QuoteVerification/Src/AttestationApp/sampleData/quote.dat differ
--- /dev/null
+++ BUILD
@@ -0,0 +1,251 @@
+# Description: sgx_data_center_attestation_primitives is the Intel SGX Data
+# Center Attestation Primitives library for linux.
+
+licenses(["notice"])
+
+exports_files(["LICENSE"])
+
+# Generates code for the untrusted interface to the PCE using the edger8r tool.
+genrule(
+    name = "gen_pce",
+    srcs = ["QuoteGeneration/psw/ae/pce/pce.edl"],
+    outs = [
+        "QuoteGeneration/psw/pce_wrapper/generated/pce_u.c",
+        "QuoteGeneration/psw/pce_wrapper/generated/pce_u.h",
+    ],
+    cmd = (
+        "./$(location @linux_sgx//:sgx_edger8r) $(SRCS) " +
+        "--untrusted --untrusted-dir $(@D)/QuoteGeneration/psw/pce_wrapper/generated/"
+    ),
+    tools = ["@linux_sgx//:sgx_edger8r"],
+)
+
+# Library exposing the edger8r-generated untrusted interface to the PCE.
+cc_library(
+    name = "pce_untrusted",
+    srcs = [
+        "QuoteGeneration/psw/ae/inc/internal/pce_cert.h",
+        "QuoteGeneration/psw/pce_wrapper/generated/pce_u.c",
+    ],
+    hdrs = ["QuoteGeneration/psw/pce_wrapper/generated/pce_u.h"],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/inc/internal",
+    ],
+    # Allow the header to be included as a global "pce_u.h".
+    strip_include_prefix = "QuoteGeneration/psw/pce_wrapper/generated/",
+    deps = [
+        ":common_inc_internal",
+        "@linux_sgx//:common_inc",
+    ],
+)
+
+# Library exposing the PCE wrapper interface.
+cc_library(
+    name = "pce_wrapper",
+    srcs = [
+        "QuoteGeneration/psw/ae/inc/aeerror.h",
+        "QuoteGeneration/psw/pce_wrapper/src/pce_parser.cpp",
+        "QuoteGeneration/psw/pce_wrapper/src/pce_wrapper.cpp",
+    ],
+    hdrs = [
+        "QuoteGeneration/psw/pce_wrapper/inc/sgx_pce.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/common",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts/parser",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/pce_wrapper/inc",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":common_inc_internal",
+        ":parser",
+        ":pce_untrusted",
+        "@linux_sgx//:common_inc",
+        "@linux_sgx//:untrusted_inc",
+        "@linux_sgx//:urts",
+    ],
+)
+
+# Generates code for the untrusted interface to the QE3 using the edger8r tool.
+genrule(
+    name = "gen_qe3",
+    srcs = ["QuoteGeneration/psw/quote_wrapper/quote/enclave/qe3.edl"],
+    outs = [
+        "QuoteGeneration/psw/quote_wrapper/generated/qe3_u.c",
+        "QuoteGeneration/psw/quote_wrapper/generated/qe3_u.h",
+    ],
+    cmd = (
+        "./$(location @linux_sgx//:sgx_edger8r) $(SRCS) " +
+        "--untrusted --untrusted-dir $(@D)/QuoteGeneration/psw/quote_wrapper/generated/"
+    ),
+    tools = ["@linux_sgx//:sgx_edger8r"],
+)
+
+# Includes for quote_wrapper that are common across qe3_untrusted and quote_wrapper.
+cc_library(
+    name = "quote_wrapper_common",
+    hdrs = [
+        "QuoteGeneration/psw/pce_wrapper/inc/sgx_pce.h",
+        "QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_lib_common.h",
+        "QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_quote.h",
+        "QuoteGeneration/psw/quote_wrapper/common/inc/sgx_quote_3.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/include",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/pce_wrapper/inc",
+    ],
+    visibility = ["@linux_sgx//:__subpackages__"],
+    deps = ["@linux_sgx//:public"],
+)
+
+# The untrusted component includes for the qe3 enclave.
+cc_library(
+    name = "qe3_untrusted",
+    srcs = [
+        "QuoteGeneration/psw/quote_wrapper/common/inc/user_types.h",
+        "QuoteGeneration/psw/quote_wrapper/generated/qe3_u.c",
+        "QuoteGeneration/psw/quote_wrapper/quote/ecdsa_quote.h",
+    ],
+    hdrs = ["QuoteGeneration/psw/quote_wrapper/generated/qe3_u.h"],
+    copts = [
+        "-Iexternal/linux_sgx/include",
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/quote",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/pce_wrapper/inc",
+    ],
+    # Allow the header to be included as a global "qe3_u.h".
+    strip_include_prefix = "QuoteGeneration/psw/quote_wrapper/generated/",
+    deps = [
+        ":common_inc_internal",
+        ":quote_wrapper_common",
+        "@linux_sgx//:public",
+    ],
+)
+
+# Library exposing quote wrapper headers
+cc_library(
+    name = "quote_wrapper",
+    srcs = [
+        "QuoteGeneration/psw/quote_wrapper/common/inc/user_types.h",
+        "QuoteGeneration/psw/quote_wrapper/generated/qe3_u.h",
+        "QuoteGeneration/psw/quote_wrapper/ql/src/sgx_dcap_ql_wrapper.cpp",
+        "QuoteGeneration/psw/quote_wrapper/quote/ecdsa_quote.h",
+        "QuoteGeneration/psw/quote_wrapper/quote/enclave/qe3.h",
+        "QuoteGeneration/psw/quote_wrapper/quote/src/qe_logic.cpp",
+        "QuoteGeneration/psw/quote_wrapper/quote/src/qe_logic.h",
+        "QuoteGeneration/psw/quote_wrapper/quote/src/sgx_ql_core_wrapper.cpp",
+    ],
+    hdrs = [
+        "QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_ecdsa_quote.h",
+        "QuoteGeneration/psw/quote_wrapper/common/inc/sgx_ql_lib_common.h",
+        "QuoteGeneration/psw/quote_wrapper/ql/src/sgx_dcap_ql_wrapper.h",
+        "QuoteGeneration/psw/quote_wrapper/quote/src/sgx_ql_core_wrapper.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/include",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/generated",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/ql/src",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/quote",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/quote/enclave",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/quote/src",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/quote_wrapper/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/pce_wrapper/inc",
+    ],
+    # The linker option below works around a linker issue. The PCE interface is
+    # implemented twice in both SGX DCAP and SGX SDK. The latter is used to
+    # build aesmd to avoid circular dependency, which results in compiling
+    # sources from SGX SDK and SGX DCAP together. The implementations are
+    # provided in separate targets in the SGX DCAP and SGX SDK BUILD files,
+    # which leaves some symbols in this library unresolved. Marking the symbol
+    # as undefined here keeps the linker from complaining about those
+    # unresolved symbols.
+    linkopts = ["-Wl,--undefined=sgx_pce_sign_report"],
+    visibility = ["@linux_sgx//:__subpackages__"],
+    deps = [
+        ":common_inc_internal",
+        ":qe3_untrusted",
+        ":quote_wrapper_common",
+        "@linux_sgx//:common_inc",
+        "@linux_sgx//:public",
+        "@linux_sgx//:untrusted_inc",
+    ],
+)
+
+cc_library(
+    name = "parser",
+    srcs = [
+        "QuoteGeneration/psw/urts/parser/elfparser.cpp",
+        "QuoteGeneration/psw/urts/parser/section.cpp",
+    ],
+    hdrs = [
+        "QuoteGeneration/psw/urts/create_param.h",
+        "QuoteGeneration/psw/urts/parser/binparser.h",
+        "QuoteGeneration/psw/urts/parser/elfparser.h",
+        "QuoteGeneration/psw/urts/parser/section.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts/parser",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+    ],
+    textual_hdrs = [
+        "QuoteGeneration/psw/urts/parser/update_global_data.hxx",
+    ],
+    deps = [
+        ":common_inc_internal",
+        "@linux_sgx//:common_inc",
+    ],
+)
+
+cc_library(
+    name = "common_inc_internal",
+    srcs = [
+        "QuoteGeneration/common/src/se_map.c",
+        "QuoteGeneration/common/src/se_thread.c",
+        "QuoteGeneration/common/src/se_trace.c",
+    ],
+    hdrs = [
+        "QuoteGeneration/common/inc/internal/arch.h",
+        "QuoteGeneration/common/inc/internal/cpputil.h",
+        "QuoteGeneration/common/inc/internal/elf_util.h",
+        "QuoteGeneration/common/inc/internal/elfheader/elf_common.h",
+        "QuoteGeneration/common/inc/internal/elfheader/elfstructs.h",
+        "QuoteGeneration/common/inc/internal/global_data.h",
+        "QuoteGeneration/common/inc/internal/metadata.h",
+        "QuoteGeneration/common/inc/internal/rts.h",
+        "QuoteGeneration/common/inc/internal/rts_cmd.h",
+        "QuoteGeneration/common/inc/internal/se_cdefs.h",
+        "QuoteGeneration/common/inc/internal/se_macro.h",
+        "QuoteGeneration/common/inc/internal/se_map.h",
+        "QuoteGeneration/common/inc/internal/se_memcpy.h",
+        "QuoteGeneration/common/inc/internal/se_page_attr.h",
+        "QuoteGeneration/common/inc/internal/se_thread.h",
+        "QuoteGeneration/common/inc/internal/se_trace.h",
+        "QuoteGeneration/common/inc/internal/se_types.h",
+        "QuoteGeneration/common/inc/internal/thread_data.h",
+        "QuoteGeneration/common/inc/internal/uncopyable.h",
+        "QuoteGeneration/common/inc/internal/util.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal/elfheader",
+    ],
+    # The contents of inst.h only makes sense if arch.h is included.
+    textual_hdrs = ["QuoteGeneration/common/inc/internal/inst.h"],
+    deps = [
+        "@linux_sgx//:common_inc",
+    ],
+)
