# Google's Modifications to Intel's SGX Data Center Attestation Primitives

## Top-level files added
  * Added `BUILD` file for Bazel support

## Modifications to v1.0.1

### Pending PRs
* [PR#22](https://github.com/intel/SGXDataCenterAttestationPrimitives/pull/22)
    - `QuoteGeneration/common/inc/internal/elfheader/elf_common.h`
      + Added missing include for `<stdint.h>`
    - `QuoteGeneration/common/inc/internal/elfheader/elfstructs.h`
      + Added missing include for `<stdint.h>`
--
diff -Nur QuoteGeneration/common/inc/internal/elfheader/elf_common.h QuoteGeneration/common/inc/internal/elfheader/elf_common.h
--- QuoteGeneration/common/inc/internal/elfheader/elf_common.h
+++ QuoteGeneration/common/inc/internal/elfheader/elf_common.h
@@ -30,6 +30,8 @@
 #ifndef _SYS_ELF_COMMON_H_
 #define	_SYS_ELF_COMMON_H_ 1
 
+#include <stdint.h>
+
 typedef uint32_t u_int32_t;
 typedef uint32_t Elf_Symndx;
 
diff -Nur QuoteGeneration/common/inc/internal/elfheader/elfstructs.h QuoteGeneration/common/inc/internal/elfheader/elfstructs.h
--- QuoteGeneration/common/inc/internal/elfheader/elfstructs.h
+++ QuoteGeneration/common/inc/internal/elfheader/elfstructs.h
@@ -26,6 +26,8 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <stdint.h>
+
 typedef uint8_t		Elf_Byte;
 
 typedef uint32_t	Elf32_Addr;	/* Unsigned program address */
Binary files QuoteVerification/Src/AttestationApp/sampleData/quote.dat and QuoteVerification/Src/AttestationApp/sampleData/quote.dat differ
--- /dev/null
+++ BUILD
@@ -0,0 +1,146 @@
+# Description: sgx_data_center_attestation_primitives is the Intel SGX Data
+# Center Attestation Primitives library for linux.
+
+licenses(["notice"])
+
+exports_files(["LICENSE"])
+
+SGX_EDGER8R_CMD = (
+    "./$(location @linux_sgx//:sgx_edger8r) " +
+    "$(location QuoteGeneration/psw/ae/pce/pce.edl) " +
+    "--untrusted --untrusted-dir $(@D)/QuoteGeneration/psw/pce_wrapper/generated/"
+)
+
+# Generates code for the untrusted interface to the PCE using the edger8r tool.
+genrule(
+    name = "gen_pce",
+    srcs = ["QuoteGeneration/psw/ae/pce/pce.edl"],
+    outs = [
+        "QuoteGeneration/psw/pce_wrapper/generated/pce_u.c",
+        "QuoteGeneration/psw/pce_wrapper/generated/pce_u.h",
+    ],
+    cmd = (SGX_EDGER8R_CMD),
+    tools = ["@linux_sgx//:sgx_edger8r"],
+)
+
+# Library exposing the edger8r-generated untrusted interface to the PCE.
+cc_library(
+    name = "pce_untrusted",
+    srcs = [
+        "QuoteGeneration/psw/ae/inc/internal/pce_cert.h",
+        "QuoteGeneration/psw/pce_wrapper/generated/pce_u.c",
+    ],
+    hdrs = ["QuoteGeneration/psw/pce_wrapper/generated/pce_u.h"],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/inc/internal",
+    ],
+    # Allow the header to be included as a global "pce_u.h".
+    strip_include_prefix = "QuoteGeneration/psw/pce_wrapper/generated/",
+    deps = [
+        ":common_inc_internal",
+        "@linux_sgx//:common_inc",
+    ],
+)
+
+# Library exposing the PCE wrapper interface.
+cc_library(
+    name = "pce_wrapper",
+    srcs = [
+        "QuoteGeneration/psw/ae/inc/aeerror.h",
+        "QuoteGeneration/psw/pce_wrapper/src/pce_parser.cpp",
+        "QuoteGeneration/psw/pce_wrapper/src/pce_wrapper.cpp",
+    ],
+    hdrs = [
+        "QuoteGeneration/psw/pce_wrapper/inc/sgx_pce.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/common",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/ae/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts/parser",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/pce_wrapper/inc",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":common_inc_internal",
+        ":parser",
+        ":pce_untrusted",
+        "@linux_sgx//:common_inc",
+        "@linux_sgx//:untrusted_inc",
+        "@linux_sgx//:urts",
+    ],
+)
+
+cc_library(
+    name = "parser",
+    srcs = [
+        "QuoteGeneration/psw/urts/parser/elfparser.cpp",
+        "QuoteGeneration/psw/urts/parser/section.cpp",
+    ],
+    hdrs = [
+        "QuoteGeneration/psw/urts/create_param.h",
+        "QuoteGeneration/psw/urts/parser/binparser.h",
+        "QuoteGeneration/psw/urts/parser/elfparser.h",
+        "QuoteGeneration/psw/urts/parser/section.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts",
+        "-Iexternal/sgx_dcap/QuoteGeneration/psw/urts/parser",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+    ],
+    textual_hdrs = [
+        "QuoteGeneration/psw/urts/parser/update_global_data.hxx",
+    ],
+    deps = [
+        ":common_inc_internal",
+        "@linux_sgx//:common_inc",
+    ],
+)
+
+cc_library(
+    name = "common_inc_internal",
+    srcs = [
+        "QuoteGeneration/common/src/se_map.c",
+        "QuoteGeneration/common/src/se_thread.c",
+        "QuoteGeneration/common/src/se_trace.c",
+    ],
+    hdrs = [
+        "QuoteGeneration/common/inc/internal/arch.h",
+        "QuoteGeneration/common/inc/internal/cpputil.h",
+        "QuoteGeneration/common/inc/internal/elf_util.h",
+        "QuoteGeneration/common/inc/internal/elfheader/elf_common.h",
+        "QuoteGeneration/common/inc/internal/elfheader/elfstructs.h",
+        "QuoteGeneration/common/inc/internal/global_data.h",
+        "QuoteGeneration/common/inc/internal/metadata.h",
+        "QuoteGeneration/common/inc/internal/rts.h",
+        "QuoteGeneration/common/inc/internal/rts_cmd.h",
+        "QuoteGeneration/common/inc/internal/se_cdefs.h",
+        "QuoteGeneration/common/inc/internal/se_macro.h",
+        "QuoteGeneration/common/inc/internal/se_map.h",
+        "QuoteGeneration/common/inc/internal/se_memcpy.h",
+        "QuoteGeneration/common/inc/internal/se_page_attr.h",
+        "QuoteGeneration/common/inc/internal/se_thread.h",
+        "QuoteGeneration/common/inc/internal/se_trace.h",
+        "QuoteGeneration/common/inc/internal/se_types.h",
+        "QuoteGeneration/common/inc/internal/thread_data.h",
+        "QuoteGeneration/common/inc/internal/uncopyable.h",
+        "QuoteGeneration/common/inc/internal/util.h",
+    ],
+    copts = [
+        "-Iexternal/linux_sgx/common/inc",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal",
+        "-Iexternal/sgx_dcap/QuoteGeneration/common/inc/internal/elfheader",
+    ],
+    # The contents of inst.h only makes sense if arch.h is included.
+    textual_hdrs = ["QuoteGeneration/common/inc/internal/inst.h"],
+    deps = [
+        "@linux_sgx//:common_inc",
+    ],
+)
