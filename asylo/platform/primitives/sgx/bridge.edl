/*
 *
 * Copyright 2019 Asylo authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// EDL file for primitives enclave infrastructure. Defines function calls across
// enclave boundary. The "trusted" scope defines "ecall" functions that are
// called on the host side and enter the enclave and execute inside it. The
// "untrusted" scope defines "ocall" functions that cross the enclave boundary
// in the opposite direction - called from within enclave, executed on
// the host side.
//
// See generate_bridge.sh for build instruction.
//
// In addition, new function definitions must be added to
// arch/untrusted/ocalls.cc and to arch/trusted/ecalls.cc for untrusted and
// trusted functions respectively.
// Once new functions are defined and generated, user-friendly wrappers need to
// be added to untrusted/enclave_calls.* and trusted/host_calls.* respectively.
enclave {
  trusted {
    // Invokes the trusted entry point designated by `selector`.
    // WARNING: Do not add calls before ecall_displatch_trusted_call, as callers
    // may assume this to be the first entry in the generated ecall table.
    public int ecall_dispatch_trusted_call(uint64_t selector,
                                          [user_check] void *buffer);

    // Intended for use by primitives enclave signal implementaion.
    // Invokes signal handling entry point.
    // WARNING: Do not add calls before ecall_deliver_signal, as callers
    // may assume this to be the second entry in the generated ecall table.
    exception_handler public int ecall_deliver_signal(
        [in, size=input_len] const char *input, bridge_size_t input_len);

    // Invokes a utility ecall that enters the enclave to take a snapshot.
    // This is a private ecall because it should only be invoked by an
    // ocall(fork).
    // WARNING: Do not add calls before ecall_take_snapshot, as callers
    // may assume this to be the third entry in the generated ecall table.
    utility_tcs public int ecall_take_snapshot(
	      [out] char **output,
	      [out] bridge_size_t *output_len);

    // Invokes a utility ecall that enters the enclave to restore it from a
    // snapshot.
    // WARNING: Do not add calls before ecall_restore, as callers may assume
    // this to be the fourth entry in the generated ecall table.
    utility_tcs public int ecall_restore(
        [user_check] const char *input,
        bridge_size_t input_len,
        [user_check] char **output,
        [user_check] bridge_size_t *output_len);

    // Invokes a utility ecall that enters the enclave to encrypt and transfer
    // the snapshot key.
    // WARNING: Do not add calls before ecall_transfer_secure_snapshot_key, as
    // callers may assume this to be the fifth entry in the generated ecall
    // table.
    utility_tcs public int ecall_transfer_secure_snapshot_key(
        [in, size=input_len] const char *input,
        bridge_size_t input_len,
        [out] char **output,
        [out] bridge_size_t *output_len);
  };

  untrusted {
    // Invokes the untrusted entry point designated by `selector`.
    int ocall_dispatch_untrusted_call(uint64_t selector,
        [user_check] void *buffer);
    void *ocall_untrusted_local_alloc(uint64_t size);
    void ocall_untrusted_local_free([user_check] void *ptr);
    int ocall_untrusted_debug_puts([in, string] const char *str);
    void **ocall_enc_untrusted_allocate_buffers(bridge_size_t count,
        bridge_size_t size);
    void ocall_enc_untrusted_deallocate_free_list([user_check] void **free_list,
        bridge_size_t count);
    pid_t ocall_enc_untrusted_fork(
        [in, string]const char *enclave_name,
	      bool restore_snapshot)
	      allow(ecall_take_snapshot, ecall_restore) propagate_errno;
  };
};
