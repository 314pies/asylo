#
# Copyright 2018 Asylo authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

load("//asylo/bazel:copts.bzl", "ASYLO_DEFAULT_COPTS")

licenses(["notice"])

# Architecture abstraction layer.
#

package(
    default_visibility = ["//asylo:implementation"],
)

# Target exposing trusted architecture-dependent components for the build
# configuration.
cc_library(
    name = "trusted_arch",
    copts = ASYLO_DEFAULT_COPTS,
    deps = select({
        "@linux_sgx//:sgx_hw": [":trusted_sgx"],
        "@linux_sgx//:sgx_sim": [":trusted_sgx"],
        "//conditions:default": [":trusted_build_only"],
    }) + [
        "//asylo:enclave_cc_proto",
        "//asylo/platform/core:shared_name",
        "//asylo/util:status",
    ],
)

# Target exposing untrusted client components for all backends.
cc_library(
    name = "untrusted_arch",
    srcs = ["sgx/untrusted/sgx_client.cc"],
    hdrs = [
        "sgx/untrusted/sgx_client.h",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    deps = [
        ":untrusted_sgx",
        "//asylo:enclave_cc_proto",
        "//asylo/platform/core:untrusted_core",
        "//asylo/platform/primitives/sgx:fork_cc_proto",
        "//asylo/platform/primitives/sgx:loader_cc_proto",
        "//asylo/platform/primitives/sgx:untrusted_sgx",
        "//asylo/util:status",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/types:span",
    ],
)

# Command to invoke the sgx edger8r tool to generate the bridge code.

ASYLO_PREFIX = "external/com_google_asylo/"

SGX_EDGER8R_COMMAND = (
    "./$(location @linux_sgx//:sgx_edger8r) " +
    "$(location sgx/bridge.edl) " +
    "--search-path " + ASYLO_PREFIX + "asylo/platform/arch/sgx " +
    "--search-path asylo/platform/arch/sgx " +
    "--search-path $(@D)/sgx " +  # Reference previously generated files
    "--trusted --trusted-dir $(@D)/sgx/trusted/ " +
    "--untrusted --untrusted-dir $(@D)/sgx/untrusted/"
)

# Command to update the generated bridge files and header paths for the
# SDK dependencies.

SGX_PREFIX = ""

UPDATE_SDK_DEPS_COMMAND = (
    "for file in $$(ls $(@D)/sgx/*trusted/bridge_*.[ch]); do " +
    "sed -i " +
    "-e '1s!^!// Generated file. See bridge.edl\\n!' " +
    "-e 's!bridge_u.h!generated_bridge_u.h!' " +
    "-e 's!bridge_t.h!generated_bridge_t.h!' " +
    "-e 's!sgx_trts.h!" + SGX_PREFIX + "include/sgx_trts.h!' " +
    "-e 's!sgx_edger8r.h!" + SGX_PREFIX + "include/sgx_edger8r.h!' " +
    "-e 's!sgx_lfence.h!" + SGX_PREFIX + "include/sgx_lfence.h!' " +
    "-e 's!<mbusafecrt.h>!\"" + SGX_PREFIX + "include/se_memcpy.h\"!' " +
    "$$file && " +
    "mv $$file $$(dirname $$file)/generated_$$(basename $$file); " +
    "done"
)

# The bridge code generated by the Intel SGX SDK edger8r tool.
genrule(
    name = "generate_bridge",
    srcs = [
        "sgx/bridge.edl",
        "//asylo/platform/primitives/sgx:errno.edl",
        "//asylo/third_party/intel:sgx_tstdc.edl",
        "//asylo/platform/primitives/sgx:bridge.edl",
    ],
    outs = [
        "sgx/trusted/generated_bridge_t.c",
        "sgx/trusted/generated_bridge_t.h",
        "sgx/untrusted/generated_bridge_u.c",
        "sgx/untrusted/generated_bridge_u.h",
    ],
    cmd = (SGX_EDGER8R_COMMAND + " && " + UPDATE_SDK_DEPS_COMMAND),
    tools = ["@linux_sgx//:sgx_edger8r"],
)

# Untrusted runtime components for SGX
cc_library(
    name = "untrusted_sgx",
    srcs = [
        "sgx/untrusted/generated_bridge_u.c",
        "sgx/untrusted/generated_bridge_u.h",
        "sgx/untrusted/ocalls.cc",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    # This option prevents the linker from discarding the definition of
    # ocall_table_bridge before it encounters a reference to it.
    linkopts = ["-Wl,--undefined=ocall_table_bridge"],
    visibility = ["//visibility:private"],
    deps = [
        "//asylo:enclave_cc_proto",
        "//asylo/platform/common:futex",
        "//asylo/platform/common:memory",
        "//asylo/platform/core:shared_name",
        "//asylo/platform/core:untrusted_core",
        "//asylo/platform/primitives:untrusted_primitives",
        "//asylo/platform/primitives/sgx:fork_cc_proto",
        "//asylo/platform/primitives/sgx:loader_cc_proto",
        "//asylo/platform/primitives/sgx:sgx_error_space",
        "//asylo/platform/primitives/sgx:sgx_params",
        "//asylo/platform/primitives/sgx:untrusted_sgx",
        "//asylo/platform/primitives/util:dispatch_table",
        "//asylo/platform/primitives/util:message_reader_writer",
        "//asylo/platform/storage/utils:fd_closer",
        "//asylo/platform/system_call/type_conversions",
        "//asylo/util:elf_reader",
        "//asylo/util:file_mapping",
        "//asylo/util:logging",
        "//asylo/util:status",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@linux_sgx//:public",
        "@linux_sgx//:urts",
    ],
)

# Trusted runtime components for SGX.
_TRUSTED_SGX_BACKEND_DEPS = [
    ":trusted_sgx_bridge",
    "@linux_sgx//:trts",
]

cc_library(
    name = "trusted_sgx",
    srcs = [
        "sgx/trusted/ecalls.cc",
        "sgx/trusted/enclave_syscalls.cc",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    linkstatic = 1,
    tags = [
        "asylo-sgx",
        "manual",
    ],
    visibility = ["//visibility:private"],
    deps = [
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "//asylo:enclave_cc_proto",
        "//asylo/util:logging",
        "//asylo/platform/common:memory",
        "//asylo/platform/core:entry_points",
        "//asylo/platform/core:shared_name",
        "//asylo/platform/host_call",
        "//asylo/platform/posix/signal:signal_manager",
        "//asylo/platform/primitives",
        "//asylo/platform/primitives:trusted_primitives",
        "//asylo/platform/primitives/sgx:sgx_error_space",
        "//asylo/platform/primitives/sgx:trusted_fork",
        "//asylo/platform/primitives/sgx:trusted_sgx",
        "//asylo/util:status",
        "@linux_sgx//:public",
    ] + select(
        {
            "@linux_sgx//:sgx_hw": _TRUSTED_SGX_BACKEND_DEPS,
            "@linux_sgx//:sgx_sim": _TRUSTED_SGX_BACKEND_DEPS,
        },
        no_match_error = "Must be built in SGX backend",
    ),
    alwayslink = 1,
)

# This target supports building trusted targets with the system native compiler,
# which provides a very basic sanity check for Asylo clients in contexts
# where pulling in the cross-compiler toolchain is inconvenient or tricky.
# Attempting to load a dynamic library linked against this target will fail
# since no actual implementation is provided.
cc_library(
    name = "trusted_build_only",
    visibility = ["//visibility:private"],
    deps = ["//asylo/platform/core:shared_name"],
)

# Trusted side of the SGX SDK generated bridge.
_TRUSTED_SGX_BRIDGE_BACKEND_DEPS = ["@linux_sgx//:public"]

cc_library(
    name = "trusted_sgx_bridge",
    srcs = ["sgx/trusted/generated_bridge_t.c"],
    hdrs = [
        "sgx/trusted/generated_bridge_t.h",
    ],
    copts = ASYLO_DEFAULT_COPTS,
    linkstatic = 1,
    tags = [
        "asylo-sgx",
        "manual",
    ],
    deps = select(
        {
            "@linux_sgx//:sgx_hw": _TRUSTED_SGX_BRIDGE_BACKEND_DEPS,
            "@linux_sgx//:sgx_sim": _TRUSTED_SGX_BRIDGE_BACKEND_DEPS,
        },
        no_match_error = "Must be built in SGX backend",
    ) + select(
        {"@com_google_asylo//asylo": ["@linux_sgx//:trts"]},
        no_match_error = "Must be built in Asylo toolchain",
    ),
)
