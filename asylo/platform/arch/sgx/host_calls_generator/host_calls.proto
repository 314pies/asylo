//
// Copyright 2017 Asylo authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package third_party.asylo.platform.arch.sgx.codegen;

// Attributes for host call parameters that are pointer types.
message PointerAttributeProto {
  enum Attribute {
    // IN: Memory pointed to by the pointer parameter is copied out of the
    // enclave and into the host function being called. This attribute must
    // be used if the pointer points to data inside the enclave.
    IN = 1;

    // OUT: After a host call is made, and before the host call returns, the
    // memory pointed to by the parameter is copied back into the
    // enclave at the location specified by the pointer originally given to
    // the host call.
    OUT = 2;

    // STRING: Marks a pointer attribute as a null-terminated C string. The
    // number of characters copied across the enclave is therefore determined
    // at runtime; characters are copied into, or out of the enclave, depending
    // on the IN/OUT attributes specified above, until a null byte is found.
    STRING = 3;

    // SIZE: Marks the number of bytes for which to perform a memory copy when
    // the IN and/or OUT attributes are specified for a pointer parameter. The
    // number of bytes is held in the attribute_expression.
    SIZE = 4;

    // USER_CHECK: The pointer parameter being passed out to the host call is
    // not checked. Users must check, or copy memory pointed to by that
    // parameter, manually.
    USER_CHECK = 5;
  }
  required Attribute attribute = 1;

  // An expression associated with the pointer attribute. For example, if the
  // pointer attribute is SIZE, the expression holds the corresponding size
  // of the pointer in bytes.
  // Attribute expressions can be either: (i) an integer (e.g. "1", "56",
  // "1000"); or (ii) the name of another parameter in the host call.
  // At present, attribute_expression is only supported by the SIZE attribute.
  optional string attribute_expression = 2;
}

// Represents a single parameter in a function definition.
message FormalParameterProto {
  required string name = 1;
  required string type = 2;
  repeated PointerAttributeProto pointer_attributes = 3;
}

// Represents a single host call function definition.
message HostCallProto {
  required string name = 1;
  required string return_type = 2;

  // The failure_return_expression is the expression returned by the host call
  // on failure (e.g. malloc returns "nullptr" on failure, lseek returns "-1",
  // isatty returns "0" etc.).
  optional string failure_return_expression = 3 [default = "-1"];

  // failure_sets_errno indicates whether or not errno is set by the host
  // call if it fails (e.g. lseek returns "-1" and sets errno on failure,
  // wait returns "-1" but does not set errno).
  optional bool failure_sets_errno = 4 [default = true];

  repeated FormalParameterProto parameters = 5;
}

// List of host calls for which to generate bridge and serialization code.
message HostCallsProto {
  repeated HostCallProto host_calls = 2;
}
