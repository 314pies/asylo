/*
 *
 * Copyright 2018 Asylo authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// EDL file for enclave infrastructure. Defines function calls across enclave
// boundary. The "trusted" scope defines "ecall" functions that are called on
// the host side and enter the enclave and execute inside it. The "untrusted"
// scope defines "ocall" functions transition across the enclave boundary in the
// opposite direction - called from within enclave, executed on the host side.
//
// See generate_bridge.sh for build instruction.
//
// In addition, new function definitions must be added to untrusted/ocalls.cc
// and to trusted/ecalls.cc for untrusted and trusted functions respectively.
//
// Once new functions are defined and generated, user-friendly wrappers need to
// be added to untrusted/enclave_calls.* and trusted/host_calls.* respectively.
enclave {
  include "asylo/platform/common/bridge_types.h"
  include "asylo/platform/core/shared_name_kind.h"

  from "../../../third_party/intel/sgx_tstdc.edl" import
      sgx_thread_wait_untrusted_event_ocall,
      sgx_oc_cpuidex,
      sgx_thread_set_untrusted_event_ocall,
      sgx_thread_setwait_untrusted_events_ocall,
      sgx_thread_set_multiple_untrusted_events_ocall;

  from "host_calls_generator/generated_bridge.edl" import *;
  from "errno.edl" import *;

  trusted {
    // Initializes enclave. The behavior of a call into an uninitialized enclave
    // is implementation defined. The caller is responsible for freeing *output
    // if *output_len > 0
    public int ecall_initialize([in, string] const char *name,
                                [in, size=input_len] const char *input,
                                bridge_size_t input_len,
                                [out] char **output,
                                [out] bridge_size_t *output_len);

    // Invokes execution entry point.
    public int ecall_run([in, size=input_len] const char *input,
                         bridge_size_t input_len,
                         [out] char **output,
                         [out] bridge_size_t *output_len);

    // Invokes finalization entry point.
    public int ecall_finalize([in, size=input_len] const char *input,
                              bridge_size_t input_len,
                              [out] char **output,
                              [out] bridge_size_t *output_len);

    // Intended for use by the SGX pthreads implementation.
    //
    // Donates the calling thread to the enclave.
    public int ecall_donate_thread();

    // Intended for use by enclave signal implementaion.
    //
    // Invokes signal handling entry point.
    exception_handler public int ecall_handle_signal(
        [in, size=input_len] const char *input,
        bridge_size_t input_len,
        [out] char **output,
        [out] bridge_size_t *output_len);
  };

  // Unless otherwise specified, each of the following calls invokes the
  // corresponding function on the host.
  untrusted {
    //////////////////////////////////////
    //              IO                  //
    //////////////////////////////////////

    int ocall_enc_untrusted_puts([in, string] const char *str) propagate_errno;
    void *ocall_enc_untrusted_malloc(bridge_size_t size) propagate_errno;

    int ocall_enc_untrusted_open([in, string] const char *path_name,
                                 int flags, uint32_t mode) propagate_errno;
    int ocall_enc_untrusted_fcntl(int fd, int cmd, int64_t arg) propagate_errno;
    int ocall_enc_untrusted_stat([in, string] const char *pathname,
                                 [out] struct bridge_stat *stat_buffer)
                                 propagate_errno;
    int ocall_enc_untrusted_fstat(int fd, [out] struct bridge_stat *stat_buffer)
                                  propagate_errno;
    int ocall_enc_untrusted_lstat([in, string] const char *pathname,
                                  [out] struct bridge_stat *stat_buffer)
                                  propagate_errno;
    bridge_ssize_t ocall_enc_untrusted_write_with_untrusted_ptr(
        int fd, [user_check] const void *buf, int size) propagate_errno;
    bridge_ssize_t ocall_enc_untrusted_read_with_untrusted_ptr(
        int fd, [user_check] void *buf, int size) propagate_errno;

    //////////////////////////////////////
    //           Sockets                //
    //////////////////////////////////////

    int ocall_enc_untrusted_connect(int sockfd,
                                    [in] const struct bridge_sockaddr *addr,
                                    bridge_size_t addrlen) propagate_errno;
    int ocall_enc_untrusted_bind(int sockfd,
                                 [in] const struct bridge_sockaddr *addr,
                                 bridge_size_t addrlen) propagate_errno;
    int ocall_enc_untrusted_accept(int sockfd,
                                   [out] struct bridge_sockaddr *addr,
                                   [in, out] bridge_size_t *addrlen)
                                   propagate_errno;
    char *ocall_enc_untrusted_inet_ntop(int af,
                                        [in, size=buf_size] const void *src,
                                        bridge_size_t src_size,
                                        [out, size=buf_size] char *dst,
                                        bridge_size_t buf_size) propagate_errno;

    bridge_ssize_t ocall_enc_untrusted_sendmsg(
        int sockfd, [user_check] const struct bridge_msghdr *msg, int flags)
        propagate_errno;

    bridge_ssize_t ocall_enc_untrusted_recvmsg(
        int sockfd, [user_check] struct bridge_msghdr *msg, int flags)
        propagate_errno;

    int ocall_enc_untrusted_getaddrinfo(
        [in, string] const char *node, [in, string] const char *service,
        [in, size=serialized_hints_len] const char *serialized_hints,
        bridge_size_t serialized_hints_len, [out] char **serialized_res_start,
        [out] bridge_size_t *serialized_res_len) propagate_errno;

    int ocall_enc_untrusted_getsockopt(int sockfd, int level, int optname,
                                       [in, out, size=optlen_in] void *optval,
                                       unsigned int optlen_in,
                                       [out] unsigned int *optlen_out)
                                       propagate_errno;

    int ocall_enc_untrusted_getsockname(int sockfd,
                                        [out] struct bridge_sockaddr *addr,
                                        [in, out] bridge_size_t *addrlen)
                                        propagate_errno;

    //////////////////////////////////////
    //           Threading              //
    //////////////////////////////////////

    // Creates a thread to call ecall_donate_thread() then returns.
    int ocall_enc_untrusted_thread_create([in, string] const char *name);

    //////////////////////////////////////
    //             poll.h               //
    //////////////////////////////////////

    int ocall_enc_untrusted_poll(
        [in, out, count = nfds] struct bridge_pollfd *fds, unsigned int nfds,
        int timeout) propagate_errno;

    //////////////////////////////////////
    //           sched.h                //
    //////////////////////////////////////

    int ocall_enc_untrusted_sched_getaffinity(
        int64_t pid,
        [out, size=128/*sizeof(cpu_set_t)*/] struct BridgeCpuSet *mask)
        propagate_errno;

    //////////////////////////////////////
    //           time.h                 //
    //////////////////////////////////////

    int ocall_enc_untrusted_nanosleep(
        [in, size=16/*sizeof(struct timespec)*/]
        const struct bridge_timespec *req,
        [out, size=16/*sizeof(struct timespec)*/] struct bridge_timespec *rem)
        propagate_errno;

    int ocall_enc_untrusted_clock_gettime(
        bridge_clockid_t clk_id,
        [out, size=16/*sizeof(struct timespec)*/] struct bridge_timespec *tp)
        propagate_errno;

    //////////////////////////////////////
    //            signal.h              //
    //////////////////////////////////////

    int ocall_enc_untrusted_register_signal_handler(
        int signum, [in] const struct BridgeSignalHandler *handler,
        [in, string] const char *name);

    int ocall_enc_untrusted_sigprocmask(
        int how, [in] const bridge_sigset_t *set,
        [out] bridge_sigset_t *oldset);

    //////////////////////////////////////
    //           sys/time.h             //
    //////////////////////////////////////

    int ocall_enc_untrusted_gettimeofday(
        [out, size=16/*sizeof(struct timeval)*/] struct bridge_timeval *tv,
        [user_check] void *tz) propagate_errno;

    //////////////////////////////////////
    //            unistd.h              //
    //////////////////////////////////////

    int ocall_enc_untrusted_pipe([out] int pipefd[2]) propagate_errno;
    int ocall_enc_untrusted_sysconf(enum SysconfConstants name)
        propagate_errno;
    uint32_t ocall_enc_untrusted_sleep(uint32_t seconds);

    //////////////////////////////////////
    //           Runtime support        //
    //////////////////////////////////////

    void *ocall_enc_untrusted_acquire_shared_resource(
        enum SharedNameKind kind, [in, string] const char *name);

    int ocall_enc_untrusted_release_shared_resource(
        enum SharedNameKind kind, [in, string] const char *name);

    //////////////////////////////////////
    //           Debugging              //
    //////////////////////////////////////
    // Temporary calls to help with debugging, or other workarounds go here.

    // Prints nbytes of memory starting at buf as hex.
    void ocall_enc_untrusted_hex_dump([in, size=nbytes] const void *buf,
                                      int nbytes);
  };

};
